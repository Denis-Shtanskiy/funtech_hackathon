# Generated by Django 5.0.4 on 2024-04-09 09:36

import django.contrib.auth.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import users.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='NotificationSwitch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_notification', models.BooleanField(default=False, verbose_name='Общий флаг активации уведомлений')),
                ('is_email', models.BooleanField(default=False, verbose_name='Уведомления по электронной почте')),
                ('is_telegram', models.BooleanField(default=False, verbose_name='Уведомления в телеграм')),
                ('is_phone', models.BooleanField(default=False, verbose_name='Уведомления по СМС')),
                ('is_push', models.BooleanField(default=False, verbose_name='Пуш уведомления')),
            ],
            options={
                'verbose_name': 'Уведомление',
                'verbose_name_plural': 'Уведомления',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=150, unique=True, verbose_name='Название тега')),
            ],
            options={
                'verbose_name': 'Тег',
                'verbose_name_plural': 'Теги',
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(max_length=150, verbose_name='Имя')),
                ('last_name', models.CharField(max_length=150, verbose_name='Фамилия')),
                ('username', models.CharField(max_length=150, unique=True, validators=[users.validators.validate_username], verbose_name='Уникальный юзернейм')),
                ('password', models.CharField(max_length=150, verbose_name='Пароль')),
                ('email', models.EmailField(max_length=254, unique=True, validators=[django.core.validators.EmailValidator()], verbose_name='Адрес электронной почты')),
                ('phone_number', models.CharField(max_length=12, unique=True, validators=[users.validators.validate_mobile], verbose_name='Номер телефона')),
                ('telegram_username', models.CharField(max_length=150, validators=[users.validators.validate_telegram], verbose_name='Ник в телеграм')),
                ('position', models.CharField(max_length=150, verbose_name='Должность')),
                ('work_place', models.CharField(max_length=150, verbose_name='Место работы(компания)')),
                ('yandex_id', models.PositiveBigIntegerField(blank=True, null=True, verbose_name='Связанный Яндекс ID')),
                ('avatar', models.ImageField(null=True, upload_to='users/images/', verbose_name='Ссылка на фото')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('notifications', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_notifications', to='users.notificationswitch', verbose_name='Настройки уведомлений')),
                ('tags', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_tags', to='users.tag', verbose_name='Интересы')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
                'ordering': ('username',),
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddConstraint(
            model_name='customuser',
            constraint=models.UniqueConstraint(fields=('username', 'email'), name='unique_user_with_email'),
        ),
    ]
